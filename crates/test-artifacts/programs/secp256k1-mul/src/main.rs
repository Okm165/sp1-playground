#![no_main]
sp1_zkvm::entrypoint!(main);

use sp1_zkvm::lib::secp256k1::Secp256k1AffinePoint;
use sp1_zkvm::lib::utils::AffinePoint;

#[sp1_derive::cycle_tracker]
pub fn main() {
    for _ in 0..4 {
        // generator.
        // 55066263022277343669578718895168534326250603453777594175500187360389116729240
        // 32670510020758816978083085130507043184471273380659243275938904335757337482424
        let a: [u32; 16] = [
            385357720, 1509065051, 768485593, 43777243, 3464956679, 1436574357, 4191992748,
            2042521214, 4212184248, 2621952143, 2793755673, 4246189128, 235997352, 1571093500,
            648266853, 1211816567,
        ];

        let mut a_point = Secp256k1AffinePoint::new(a);

        // scalar.
        // 3
        let scalar: [u32; 8] = [3, 0, 0, 0, 0, 0, 0, 0];

        println!("cycle-tracker-start: secp256k1_mul");
        a_point.mul_assign(&scalar).unwrap();
        println!("cycle-tracker-end: secp256k1_mul");

        // 3 * generator.
        // 112711660439710606056748659173929673102114977341539408544630613555209775888121
        // 25583027980570883691656905877401976406448868254816295069919888960541586679410
        let c: [u32; 16] = [
            3168810745, 2248274195, 2205129136, 3039938629, 4171059753, 1228164997, 2455290640,
            4180707841, 2226710130, 1824128373, 885138203, 1694542233, 708309846, 266549222,
            1663952916, 948927247,
        ];

        assert_eq!(a_point.0, c);
    }

    println!("done");
}
