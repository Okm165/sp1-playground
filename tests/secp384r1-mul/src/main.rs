#![no_main]
sp1_zkvm::entrypoint!(main);

use sp1_zkvm::precompiles::secp384r1::Secp384r1Operations;
use sp1_zkvm::precompiles::utils::AffinePoint;

#[sp1_derive::cycle_tracker]
pub fn main() {
    // generator.
    // 26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087
    // 8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871
    let a: [u8; 96] = [
        183, 10, 118, 114, 56, 94, 84, 58, 108, 41, 85, 191, 93, 242, 2, 85, 56, 42, 84, 130, 224,
        65, 247, 89, 152, 155, 167, 139, 98, 59, 29, 110, 116, 173, 32, 243, 30, 199, 177, 142, 55,
        5, 139, 190, 34, 202, 135, 170, 95, 14, 234, 144, 124, 29, 67, 122, 157, 129, 126, 29, 206,
        177, 96, 10, 192, 184, 240, 181, 19, 49, 218, 233, 124, 20, 154, 40, 189, 29, 244, 248, 41,
        220, 146, 146, 191, 152, 158, 93, 111, 44, 38, 150, 74, 222, 23, 54,
    ];

    let mut a_point = AffinePoint::<Secp384r1Operations, 24>::from_le_bytes(a);

    // scalar.
    // 3
    let scalar: [u32; 12] = [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    println!("cycle-tracker-start: secp384r1_mul");
    a_point.mul_assign(&scalar);
    println!("cycle-tracker-end: secp384r1_mul");

    // 3 * generator.
    // 1150902892488483458936980703033240421996917307006362560128741616924334451190275252566486993672663650518120360101937
    // 31026896179475916024120184231935979451435829475766013456640577102369059008378103381483562093497986423351518602141169
    let c: [u8; 96] = [
        49, 200, 0, 5, 199, 229, 215, 2, 13, 88, 38, 80, 174, 187, 8, 180, 166, 109, 86, 211, 64,
        242, 164, 190, 6, 205, 45, 32, 16, 57, 157, 203, 152, 125, 220, 95, 126, 60, 121, 100, 20,
        250, 111, 96, 212, 65, 122, 7, 241, 29, 47, 10, 96, 40, 95, 182, 152, 210, 181, 228, 107,
        189, 74, 194, 172, 30, 17, 220, 14, 76, 104, 247, 165, 90, 17, 133, 28, 180, 32, 133, 153,
        252, 169, 2, 150, 190, 11, 125, 131, 66, 12, 11, 202, 247, 149, 201,
    ];

    assert_eq!(a_point.to_le_bytes(), c);

    println!("done");
}
