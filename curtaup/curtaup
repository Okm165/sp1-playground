#!/usr/bin/env bash

# Reference: https://github.com/foundry-rs/foundry/blob/master/foundryup/foundryup

set -eo pipefail

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
CURTA_DIR=${CURTA_DIR:-"$BASE_DIR/.cargo-prove"}
CURTA_BIN_DIR="$CURTA_DIR/bin"
mkdir -p $CURTA_BIN_DIR

BINS=(cargo-prove)

export RUSTFLAGS="-C target-cpu=native"

main() {
  need_cmd git
  need_cmd curl

  while [[ -n $1 ]]; do
    case $1 in
      --)               shift; break;;

      -r|--repo)        shift; CURTAUP_REPO=$1;;
      -b|--branch)      shift; CURTAUP_BRANCH=$1;;
      -v|--version)     shift; CURTAUP_VERSION=$1;;
      -p|--path)        shift; CURTAUP_LOCAL_REPO=$1;;
      -P|--pr)          shift; CURTAUP_PR=$1;;
      -C|--commit)      shift; CURTAUP_COMMIT=$1;;
      --arch)           shift; CURTAUP_ARCH=$1;;
      --platform)       shift; CURTAUP_PLATFORM=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        warn "unknown option: $1"
        usage
        exit 1
    esac; shift
  done

  # Print the banner after successfully parsing args
  banner

  if [ -n "$CURTAUP_PR" ]; then
    if [ -z "$CURTAUP_BRANCH" ]; then
      CURTAUP_BRANCH="refs/pull/$CURTAUP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs curta from a local repository if --path parameter is provided
  if [[ -n "$CURTAUP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$CURTAUP_REPO" ] || [ -n "$CURTAUP_BRANCH" ] || [ -n "$CURTAUP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $CURTAUP_LOCAL_REPO"
    cd "$CURTAUP_LOCAL_REPO"
    ensure cargo build --bins --release # need 4 speed

    for bin in "${BINS[@]}"; do
      # Remove prior installations if they exist
      rm -f "$CURTA_BIN_DIR/$bin"
      # Symlink from local repo binaries to bin dir
      ensure ln -s "$PWD/target/release/$bin" "$CURTA_BIN_DIR/$bin"
    done

    say "done"
    exit 0
  fi

  CURTAUP_REPO=${CURTAUP_REPO:-succinctlabs/vm}

  # Install by downloading binaries
  if [[ "$CURTAUP_REPO" == "succinctlabs/vm" && -z "$CURTAUP_BRANCH" && -z "$CURTAUP_COMMIT" ]]; then
    CURTAUP_VERSION=${CURTAUP_VERSION:-nightly}
    CURTAUP_TAG=$CURTAUP_VERSION

    # Normalize versions (handle channels, versions without v prefix
    if [[ "$CURTAUP_VERSION" =~ ^nightly ]]; then
      CURTAUP_VERSION="nightly"
    elif [[ "$CURTAUP_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      CURTAUP_VERSION="v${CURTAUP_VERSION}"
      CURTAUP_TAG="${CURTAUP_VERSION}"
    fi

    say "installing curta (version ${CURTAUP_VERSION}, tag ${CURTAUP_TAG})"

    uname_s=$(uname -s)
    PLATFORM=$(tolower "${CURTAUP_PLATFORM:-$uname_s}")
    EXT="tar.gz"
    case $PLATFORM in
      linux) ;;
      darwin|mac*)
        PLATFORM="darwin"
        ;;
      mingw*|win*)
        EXT="zip"
        PLATFORM="win32"
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    uname_m=$(uname -m)
    ARCHITECTURE=$(tolower "${CURTAUP_ARCH:-$uname_m}")
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] ||[ "${ARCHITECTURE}" = "aarch64" ] ; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

    # Compute the URL of the release tarball in the curta repository.
    RELEASE_URL="https://github.com/${CURTAUP_REPO}/releases/download/${CURTAUP_TAG}/"
    RELEASE_URL="https://curta-vm-artifacts.s3.us-west-2.amazonaws.com/"
    BIN_ARCHIVE_URL="${RELEASE_URL}cargo_prove_${CURTAUP_VERSION}_${PLATFORM}_${ARCHITECTURE}.$EXT"
    MAN_TARBALL_URL="${RELEASE_URL}cargo_prove_man_${CURTAUP_VERSION}.tar.gz"

    # Download and extract the binaries archive
    say "downloading latest cargo-prove"
    if [ "$PLATFORM" = "win32" ]; then
      tmp="$(mktemp -d 2>/dev/null || echo ".")/cargo-prove.zip"
      ensure download "$BIN_ARCHIVE_URL" "$tmp"
      ensure unzip "$tmp" -d "$CURTA_BIN_DIR"
      rm -f "$tmp"
    else
      ensure download "$BIN_ARCHIVE_URL" | ensure tar -xzC "$CURTA_BIN_DIR"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="$CURTA_BIN_DIR/$bin"

      # Print installed msg
      say "installed - $(ensure "$bin_path" prove --version)"

      # Check if the default path of the binary is not in CURTA_BIN_DIR
      which_path="$(command -v "$bin" || true)"
      if [ -n "$which_path" ] && [ "$which_path" != "$bin_path" ]; then
        warn ""
        cat 1>&2 <<EOF
There are multiple binaries with the name '$bin' present in your 'PATH'.
This may be the result of installing '$bin' using another method,
like Cargo or other package managers.
You may need to run 'rm $which_path' or move '$CURTA_BIN_DIR'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
      fi
    done

    say "installing rust toolchain"
    ensure "$bin_path" prove install-toolchain
    say "installed rust toolchain"

    say "done!"

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd cargo
    CURTAUP_BRANCH=${CURTAUP_BRANCH:-master}
    REPO_PATH="$CURTA_DIR/$CURTAUP_REPO"

    # If repo path does not exist, grab the author from the repo, make a directory in .foundry, cd to it and clone.
    if [ ! -d "$REPO_PATH" ]; then
      AUTHOR="$(echo "$CURTAUP_REPO" | cut -d'/' -f1 -)"
      ensure mkdir -p "$CURTA_DIR/$AUTHOR"
      cd "$CURTA_DIR/$AUTHOR"
      ensure git clone "https://github.com/$CURTAUP_REPO"
    fi

    # Force checkout, discarding any local changes
    cd "$REPO_PATH"
    ensure git fetch origin "${CURTAUP_BRANCH}:remotes/origin/${CURTAUP_BRANCH}"
    ensure git checkout "origin/${CURTAUP_BRANCH}"

    # If set, checkout specific commit from branch
    if [ -n "$CURTAUP_COMMIT" ]; then
      say "installing at commit $CURTAUP_COMMIT"
      ensure git checkout "$CURTAUP_COMMIT"
    fi

    # Build the repo and install the binaries locally to the .curta bin directory.
    ensure cargo build --bins --release
    for bin in "${BINS[@]}"; do
      for try_path in target/release/$bin target/release/$bin.exe; do
        if [ -f "$try_path" ]; then
          [ -e "$CURTA_BIN_DIR/$bin" ] && warn "overwriting existing $bin in $CURTA_BIN_DIR"
          mv -f "$try_path" "$CURTA_BIN_DIR"
        fi
      done
    done

    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for the Curta zkVM.

Update or revert to a specific curta version with ease.

USAGE:
    curtaup <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
    --arch          Install a specific architecture (supports amd64 and arm64)
    --platform      Install a specific platform (supports win32, linux, and darwin)
EOF
}

say() {
  printf "curtaup: %s\n" "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [ -n "$2" ]; then
    # output into $2
    if check_cmd curl; then
      curl -#o "$2" -L "$1"
    else
      wget --show-progress -qO "$2" "$1"
    fi
  else
    # output to stdout
    if check_cmd curl; then
      curl -#L "$1"
    else
      wget --show-progress -qO- "$1"
    fi
  fi
}

# Banner Function for curta 
banner() {
  printf "
.______  ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______

  ________  ______  _________ 
  / ____/ / / / __ \/_  __/   |        
 / /   / / / / /_/ / / / / /| |           Let's build the world's best
/ /___/ /_/ / _, _/ / / / ___ |                  zkVM, together.
\____/\____/_/ |_| /_/ /_/  |_| 

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ 

Repo       : https://github.com/succinctlabs/curta
Book       : https://curta.succinct.xyz                      
Chat       : https://t.me/curta/                         
Support    : https://t.me/curta-support/

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ 

"
}


main "$@"